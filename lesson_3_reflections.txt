Q: When would you want to use a remote repository rather than keeping all your work local?
A: Not sure why you even need to use remote instead of local.

Q: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
A: Sounds like automatic pull is not a good idea, because it doesn't allow you to control what changes are pulled and when. It's better 
To pull manually, so you update you local files when you are ready


Q: Describe the differences between forks, clones, and branches. When would you use one instead of another?
A: Fork is a copy of the repository in the Github, this copy a sits own master branch and is like another repository. Any changes to it don't affect original repository and cannot be pushed there
Clone is a copy of repository as well, but it's purpose is to make changes to the original repository when they pushed. It is a copy from GitHub to local machine mainly
Branch is a special copy of the repository, which has a label, called branch name. There can be many of those within one repo and they can be merged together and pushed. These changes will affect the repository.

Q: What is the benefit of having a copy of the last known state of the remote stored locally?
A: The benefit is that you are able to track what changes were made by other team members while you were making yours. This will also give you opportunity to 
Compare changes and merge if necessary

Q: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
A: We would think about alternatives, e.g. Google Docs or most likely we would pair. It would be extremely hard to collaborate though. 

Q: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A: You would make changes on particular branch instead of master when you are working on specific feature and first may want to complete that feature before it would become active. Good about this approach is that it can be tested and reviewed properly before being merged. 